}
total_run[i,] = current_wealth
} #End of for loop
print(total_run)
} #End of function
?histgram
?hist
x = c("a", "b", "c")
s = data.frame(x = 1:3)
s
data.frame
?data.frame
data.frame(x = 1:3, row.names = x)
s data.frame(x = 1:3, row.names = x)
s = data.frame(x = 1:3, row.names = x)
s
hist(s)
summary(x)
summary(s)
s = data.frame(col.names = x)
s
mtcars
str(mtcars)
?data.frame
x = c(2,3,5)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
cd
df
df = data.frame(n)
df
df = data.frame(12,23,34)
df
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
df
df[1]
df[,1]
?bar
barplot(df)
barplot(df[1,])
df[1,]
barplot(df[,1])
?barplot
barplot(n, names.arg = s)
1/(2)^(1/2)
2^(1/2)/2
(2^(1/2))/2
.6^2 + .8^2
sim_winner_binom <- function(wealth, payoff_win, max_time, run_time)
{
bankruptcy = 0
total_run = data.frame(x = 1:run_time)
for (i in 1:run_time)
{
t = 1; # For loop index.
current_wealth = wealth;
while ( (current_wealth>0) && (t < max_time) ) # Halt the iteration when wealth is depleted or after max_t bets.
{
bet_outcome = rbinom(1, 1, .5);       # draw random number determining bet's outcome.
# Variable win equals 1 with probability p and 0 otherwise.
if (bet_outcome == 1)
{
current_wealth = current_wealth + payoff_win;       # If win = 1 then wealth increases by b.
}
else
{
current_wealth = current_wealth - payoff_win;       # If win = 0 wealth decreases by b.
}
t = t + 1;                   # Increase time and repeat.
}  # end While Loop
if (t < max_time)
{
bankruptcy = bankruptcy + 1;  # If the actual number of rounds is less than the max,
# bankrupt=1 because the player went bankrupt.
}
total_run[i,] = current_wealth
} #End of for loop
print(total_run)
} #End of function
1.4*.8
?vector
vector(1,2,3)
as.vector(n)
v0 = c(.6, 0, -.8)
v0 = as.vector(c(.6, 0, -.8))
v0 == c(.6, 0, -.8)
as.vector(c(.6, 0, -.8)) == c(.6, 0, -.8)
v1 = c(1,1,0)
v0 * v1
v1 = c(3, -2, -1)
v2 = c(0, 2, -1.4)
v3 = c(-1, 0, 2)
v1 * v0
sum
sum(v1 * v0)
sum(v2 * v0)
sum(v3 * v0)
dot
df = mtcars
df
df[1,3:6]
as.vector(df[1,3:6])
?as.vector
as.vector(df[1,3:6], mode = "list")
as.vector(df[1,3:6], mode = "numeric")
str(as.vector(df[1,3:6], mode = "numeric"))
?as.vector
str(as.vector(df[1,3:6], mode = "list"))
str(as.vector(df[1,3:6], mode = "expression"))
str(as.vector(df[1,3:6], mode = "atom"))
str(as.vector(df[1,3:6], mode = "any"))
str(as.vector(df[1,3:6], mode = "num"))
str(as.vector(df[1,3:6], mode = "numeric"))
2^(-1)
2^(-1/2)
1/(2)^1/2
1/(2)^(1/2)
version()
version
library(tm)
install.packages(tm)
a = matrix(c(1,2,3,4,5,6), nrow = 2)
a
b = matrix(c(1,2,3,4), nrow = 2)
a * b
b = matrix(c(1,2,3,4,5,6), nrow = 2)
a * b
require(data.table)
train <- fread(train)
u <- rbind(u1,u2,u3)
v1 <- c(-1, 0, 0, 1)
v2 <- c(0,1,2,4)
v3 <- c(.8,.4,.4,0)
v4 <- c(0,.2,.4,.9)
v <- rbind(v1,v2,v3,v4)
# A1
lapply(1:4, function(a) sqrt(sum(v[a,]^2)))
# A2
x1 <- c(1.5,3.8,(-5.5),12.5)
x2 <- c(-1.1,-.7,-1.8,2.6)
x3 <- c(.3,.4,-.7,1.8)
x4 <- c(-.9,2.9,-7.3,13.8)
x5 <- c(.3,-1.3,3.7,-7)
x <- c(x1,x2,x3,x4,x5)
a <- c(.7,-.5,.3,0,.3)
b <- c(0,.6,.3,-.6,.6)
c <- c(.6,.4,.1,-.1,-.6)
sum(a*b)
sum(b*c)
sum(c*a)
x1 <- c(0, 1, 1, .5)
x2 <- c(4.5, 3.1, -1.6, -3.1)
x3 <- c(-1.5, 0.2, -1.1, -1.2)
u1 <- c(.64, .51, -.26, -.51)
u2 <- c(-.77, .43, -.21, -.43)
u3 <- c(0, .67, .67, .33)
u <- rbind(u1,u2,u3)
lapply(1:3, function(r) x*u[r,]
)
x1*u1
lapply(1:3, function(r) sum(x*u[r,]))
sum(x1*u1)
lapply(1:3, function(r) sum(x1*u[r,]))
lapply(1:3, function(r) sum(x2*u[r,]))
lapply(1:3, function(r) sum(x3*u[r,]))
.3 * .4 * .2 * .3
.2 * .7 * .3 * .3 * .4
.5 * .2 * .5 * .7
v1 <- c(-1, 0, 0, 1)
v2 <- c(0,1,2,4)
v3 <- c(.8,.4,.4,0)
v4 <- c(0,.2,.4,.9)
v <- rbind(v1,v2,v3,v4)
lapply(1:4, function(a) sqrt(sum(v[a,]^2)))
x1 <- c(1.5,3.8,(-5.5),12.5)
x2 <- c(-1.1,-.7,-1.8,2.6)
x3 <- c(.3,.4,-.7,1.8)
x4 <- c(-.9,2.9,-7.3,13.8)
x5 <- c(.3,-1.3,3.7,-7)
x <- c(x1,x2,x3,x4,x5)
a <- c(.7,-.5,.3,0,.3)
b <- c(0,.6,.3,-.6,.6)
c <- c(.6,.4,.1,-.1,-.6)
sum(a*b)
sum(b*c)
sum(c*a)
x1 <- c(0, 1, 1, .5)
x2 <- c(4.5, 3.1, -1.6, -3.1)
x3 <- c(-1.5, 0.2, -1.1, -1.2)
u1 <- c(.64, .51, -.26, -.51)
u2 <- c(-.77, .43, -.21, -.43)
u3 <- c(0, .67, .67, .33)
u <- rbind(u1,u2,u3)
zx1 <- lapply(1:3, function(r) sum(x1*u[r,]))
zx2 <- lapply(1:3, function(r) sum(x2*u[r,]))
zx3 <- lapply(1:3, function(r) sum(x3*u[r,]))
zx1
zx2
zx3
sum(
sum((x1 - zx1[[1]]*u1)^2),
sum((x2 - zx2[[1]]*u1)^2)
)
zx1[[1]]
x1
zx1[[1]]*u1
x1
zx1
u1
sum(
sum((x1 - zx1[[1]]*u1)^2),
sum((x2 - zx2[[1]]*u1)^2)
)
zx1[[1]]
zx1
zx1
zx2
zx1[[1]]*u1
x1 - zx1[[1]]*u1
((x1 - zx1[[1]]*u1)^2)
sum((x1 - zx1[[1]]*u1)^2),
sum((x1 - zx1[[1]]*u1)^2)
sum((x2 - zx2[[1]]*u1)^2)
sum(
sum(
(x1 - (zx1[[1]]*u1 + zx1[[2]]*u2))^2
),
sum(
(x2 - (zx2[[1]]*u1 + zx2[[2]]*u2))^2
)
)
zx1
zx2
zx3
x1
x1*u2
x1*u1
sum(x1*u1)
u1*-.005
sum(
sum((x1 - zx1[[1]]*u1)^2),
sum((x2 - zx2[[1]]*u1)^2)
)
sum(
sum(
(x1 - (zx1[[1]]*u1 + zx1[[2]]*u2))^2
),
sum(
(x2 - (zx2[[1]]*u1 + zx2[[2]]*u2))^2
)
)
.3 * .4 * .2 * .3
.2 * .7 * .3 * .3 * .4
# c)
.5 * .2 * .5 * .7
mt <- matrix(u)
mt
mt <- matrix(u, nrow=2)
mt
mt[1]
mt[8]
u
str(u)
class(u)
as.data.frame(u)
as.data.frame(u)[6]
require(xgboost)
?xgboost
setwd("F:/Dropbox/Fordham/Fall 2015/CISC 5800 - MACHINE LEARNING/Final Project/Adult")
require(data.table)
Adult.data <- fread('adult.data.txt')
View(Adult.data)
summary(Adult.data$V11)
summary(Adult.data$V12)
hist(Adult.data$V11)
hist(Adult.data$V12)
boxplot(Adult.data$V12)
boxplot(Adult.data$V1)
hist(Adult.data$V1)
cor(Adult.data)
cor(Adult.data[,c("V11", "V12", "V15")])
cor(Adult.data[,c("V11", "V12", "V15"), with = F])
dim(Adult.data[,c("V11", "V12", "V15"), with = F])
View(head(Adult.data[,c("V11", "V12", "V15"), with = F]))
cordt <- Adult.data[,c("V11", "V12", "V15"), with = F]
cordt$V15 <- as.factor(cordt$V15)
cor(cordt)
str(cordt)
cordt$V15 <- as.integer(cordt$V15)
table(cordt$V15)
cordt$V15 <- cordt$V15 - 1
cor(cordt)
?cor
cov(cordt)
length(Adult.data$V7)
length(Adult.data$V7!=0)
sum(Adult.data$V7!=0)
Adult.data$V7!=0[1:5]
(Adult.data$V7!==0)[1:5]
sum(Adult.data$V7!==0)
sum(Adult.data$V11!==0)
View(Adult.data)
sum(Adult.data$V11!=0)
sum(Adult.data$V11!=0)/nrow(Adult.data)
cordt <- cbind(cordt, Adult.data$V1)
cor(cordt)
View(Adult.data)
View(cordt)
cordt$V2 <- Adult.data$V1
cor(cordt)
cor(cbind(Adult.data$V1, Adult.data$V15))
cor(cbind(Adult.data$V1, as.integer(as.factor(Adult.data$V15))))
subadult <- subset(Adult.data, Adult.data$v11 != 0)
subadult <- subset(Adult.data, (Adult.data$v11 != 0|Adult.data$v12 != 0)
)
subadult <- subset(Adult.data, xor(Adult.data$v11 != 0, Adult.data$v12 != 0))
subadult <- subset(Adult.data, Adult.data$v11 != 0)
subadult <- subset(Adult.data, Adult.data$v11 != 0)[, c("V11", "V15")]
subadult <- subset(Adult.data, Adult.data$v11 != 0)[, c("V11", "V15"), with = F]
View(subadult)
subadult <- subset(Adult.data, Adult.data$v11 != 0)
str(Adult.data$V11)
table(aAdult.data$V11 == 0)
table(Adult.data$V11 == 0)
table(Adult.data$V11 != 0)
Adult.data[Adult.data$V11 != 0,]
subadult <- Adult.data[Adult.data$V11 != 0,]
cor(subadult[,c("V11", "V15")])
subadult$V15 <- as.integer(as.factor(subadult$V15))
cor(subadult[,c("V11", "V15")])
cor(subadult[,c("V11", "V15"), with =F])
hist(subadult$V11)
summary(subadult$V11)
boxplot(subadult$V11)
hist(subadult$V11, 10)
?hist
hist(subadult$V11, 10)
hist(subadult$V11, 1)
hist(subadult$V11, 100)
hist(subadult$V11, 1000)
hist(subadult$V11, 10000)
hist(subadult$V11, 100)
require(data.table)
Adult.data <- fread('adult.data.txt')
view(Adult.data)
View(Adult.data)
str(ault.data)
str(Adult.data)
Adult.data[,V4:=NULL]
table(Adult.data$V15)
which.max(table(Adult.data$V15))
max(table(Adult.data$V15))
max(table(Adult.data$V15))/nrow(Adult.data)
View(head(Adult.data[,V2]))
table(Adult.data$V2)
Adult.data[,V2] <- as.factor(Adult.data[,V2])
Adult.data[,V2] <- as.factor(Adult.data[,V2])
Adult.data[,'V2'] <- as.factor(Adult.data[,'V2'])
str(Adult.data)
Adult.data <- fread('adult.data.txt')
Adult.data[,V2:=as.factor]
Adult.data[,V2,with = F] <- as.factor(Adult.data[,V2, with = F])
Adult.data[,'V2',with = F] <- as.factor(Adult.data[,V2, with = F])
Adult.data[,'V2',with = F] <- as.factor(Adult.data[,'V2', with = F])
Adult.data[[V2]]
Adult.data[['V2']]
require(data.table)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
names(which(charIndex == T)
)
char_int <- as.data.frame(sapply(names(which(charIndex == T)), function(i) as.integer(as.factor(adult[, i]))))
finalset <- cbind(adult[, charIndex == F], char_int)
str(finalset)
char_int <- as.data.frame(sapply(names(which(charIndex == T)), function(i) as.integer(as.factor(adult[, i])) - 1 ))
require(data.table)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
finalset <- cbind(adult[, charIndex == F], char_int)
names(which(charIndex == T)
)
adultcol
View(finalset)
finalset <- finalset[, adultcol]
View(finalset)
write.csv(finalset, file = "finalset_cleaned.csv", row.names = F)
install.packages('CaTools')
install.packages('caTools')
require(caTools)
spt <- sample.split(finalset$V15, .75)
?write.csv
require(data.table)
require(caTools)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
finalset <- cbind(adult[, charIndex == F], char_int)
# Re-order
finalset <- finalset[, adultcol]
# Split
set.seed(42)
spt <- sample.split(finalset$V15, .75)
train <- subset(finalset, spt == T)
test  <- subset(finalset, spt == F)
write.csv(train, file = "finalset_cleaned_X.csv", row.names = F)
write.csv(train, file = "finalset_cleaned_Y.csv", row.names = F)
rbinom(10,1,.3)
require(data.table)
require(caTools)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
finalset <- cbind(adult[, charIndex == F], char_int)
# Re-order
finalset <- finalset[, adultcol]
# Split
set.seed(42)
spt <- sample.split(finalset$V15, .75)
train <- subset(finalset, spt == T)
test  <- subset(finalset, spt == F)
View(train)
write.csv(rbind(train, test), file = "finalset_cleaned_X.csv", row.names = F)
require(data.table)
require(caTools)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
finalset <- cbind(adult[, charIndex == F], char_int)
# Re-order
finalset <- finalset[, adultcol]
# Split
set.seed(42)
spt <- sample.split(finalset$V15, .75)
train <- subset(finalset, spt == T)
test  <- subset(finalset, spt == F)
write.csv(train, file = "finalset_cleaned_X.csv", row.names = F)
write.csv(test,  file = "finalset_cleaned_Y.csv", row.names = F)
require(data.table)
require(caTools)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
Adult.data <- fread('adult.data.txt')
adult <- as.data.frame(Adult.data)
# Benchmark using majority vote
# 0.7591904
# max(table(Adult.data$V15))/nrow(Adult.data)
# ==== Data preparation =====================================
# Transform char into int
adultcol <- colnames(adult)
charIndex <- sapply(adult, class) == 'character'
char_int <- as.data.frame(sapply(names(which(charIndex == T)), # Colnames of factor columns
function(i) as.integer(as.factor(adult[, i])) - 1 )
)
IntSet <- cbind(adult[, charIndex == F], char_int)
# Re-order
IntSet <- IntSet[, adultcol]
# Remove column(s)
IntSet$V4 <- NULL    # remove education
# Scaling
scaSet <- scale(IntSet[, 1:(ncol(IntSet)-1)])
y <- IntSet[, ncol(IntSet)] # To prevent duplicated "V14" issue
# Re-combine
IntSet <- as.data.frame(cbind(scaSet,y))
FinalSet <- IntSet
summary(FinalSet)
set.seed(42)
spt <- sample.split(FinalSet$y, .75)
train <- subset(FinalSet, spt == T)
test  <- subset(FinalSet, spt == F)
?svm
require(e1071)
install.packages(e1071)
require('e1071')
install.packages('e1071')
require('e1071')
version
?svm
SVMMod <- svm(y ~ ., data = train)
